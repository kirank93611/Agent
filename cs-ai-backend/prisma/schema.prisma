generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  password      String
  role          Role      @default(USER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  conversations Conversation[]
  tasks         AITask[]
}

model Conversation {
  id        String    @id @default(cuid())
  userId    String
  user      User      @relation(fields: [userId], references: [id])
  messages  Message[]
  metadata  Json?     // For storing vector embeddings and other metadata
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Message {
  id             String       @id @default(cuid())
  conversationId String
  conversation   Conversation @relation(fields: [conversationId], references: [id])
  content        String
  role           MessageRole
  vectorId       String?      // Reference to Pinecone vector ID
  metadata       Json?        // For storing additional message metadata
  createdAt      DateTime     @default(now())
}

model AITask {
  id          String    @id @default(cuid())
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  type        TaskType
  status      TaskStatus @default(PENDING)
  data        Json      // Task-specific data
  result      Json?     // Task result
  scheduledFor DateTime?
  completedAt  DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

enum Role {
  USER
  ADMIN
}

enum MessageRole {
  USER
  ASSISTANT
  SYSTEM
}

enum TaskType {
  FOLLOW_UP
  AUTO_REPLY
  SUMMARIZE
  ANALYZE
}

enum TaskStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
} 